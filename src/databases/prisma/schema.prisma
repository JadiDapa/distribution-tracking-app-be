// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique
  user                   String
  password               String
  picture                String?
  status                 String
  unitId                 Int
  unit                   AccountUnit              @relation(fields: [unitId], references: [id])
  higherAccountId        Int?
  higherAccount          Account?                 @relation("HigherAccount", fields: [higherAccountId], references: [id])
  lowerAccounts          Account[]                @relation("HigherAccount")
  MaterialInventory      MaterialInventory[]
  ToolInventory          ToolInventory[]
  VehicleInventory       VehicleInventory[]
  requestedRequests      Request[]                @relation("RequestedRelation")
  requesterRequests      Request[]                @relation("RequesterRelation")
  MaterialQuantityUpdate MaterialQuantityUpdate[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  AreaVehicle            Vehicle[]                @relation("AreaRelation")
  LocationVehicle        Vehicle[]                @relation("LocationRelation")
  ToolQuantityUpdate     ToolQuantityUpdate[]
}

model AccountUnit {
  id        Int       @id @default(autoincrement())
  unit      String    @unique
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Material {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  sku                   String                  @unique
  status                String
  detail                String?
  picture               String?
  category              MaterialCat             @relation(fields: [categoryId], references: [id])
  categoryId            Int
  MaterialInventory     MaterialInventory[]
  RequestItem           RequestItem[]
  MaterialQuantityItems MaterialQuantityItems[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model MaterialCat {
  id        Int        @id @default(autoincrement())
  category  String
  Material  Material[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MaterialInventory {
  id         Int      @id @default(autoincrement())
  material   Material @relation(fields: [materialId], references: [id])
  materialId Int
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MaterialQuantityUpdate {
  id        Int                     @id @default(autoincrement())
  code      String
  reason    String                  @db.LongText
  items     MaterialQuantityItems[]
  note      String                  @db.LongText
  account   Account                 @relation(fields: [accountId], references: [id])
  accountId Int
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model MaterialQuantityItems {
  id                       Int                     @id @default(autoincrement())
  material                 Material?               @relation(fields: [materialId], references: [id])
  materialId               Int?
  quantity                 Int
  MaterialQuantityUpdate   MaterialQuantityUpdate? @relation(fields: [MaterialQuantityUpdateId], references: [id])
  MaterialQuantityUpdateId Int?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
}

model Tool {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  sku                String               @unique
  status             String
  expired_at         DateTime
  detail             String?
  picture            String?
  category           ToolCat              @relation(fields: [categoryId], references: [id])
  categoryId         Int
  ToolInventory      ToolInventory[]
  Request            RequestItem[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ToolQuantityUpdate ToolQuantityUpdate[]
  ToolQuantityItems  ToolQuantityItems[]
}

model ToolCat {
  id        Int      @id @default(autoincrement())
  category  String
  Tool      Tool[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToolInventory {
  id        Int      @id @default(autoincrement())
  tool      Tool     @relation(fields: [toolId], references: [id])
  toolId    Int
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToolQuantityUpdate {
  id        Int                 @id @default(autoincrement())
  code      String
  reason    String              @db.LongText
  items     ToolQuantityItems[]
  note      String              @db.LongText
  account   Account             @relation(fields: [accountId], references: [id])
  accountId Int
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  Tool      Tool?               @relation(fields: [toolId], references: [id])
  toolId    Int?
}

model ToolQuantityItems {
  id                   Int                 @id @default(autoincrement())
  tool                 Tool?               @relation(fields: [toolId], references: [id])
  toolId               Int?
  quantity             Int
  toolQuantityUpdate   ToolQuantityUpdate? @relation(fields: [toolQuantityUpdateId], references: [id])
  toolQuantityUpdateId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Vehicle {
  id               Int                @id @default(autoincrement())
  police_number    String             @unique
  variant          VehicleVariant     @relation(fields: [variantId], references: [id])
  variantId        Int
  brand            String
  detail           String
  manufacture_year String
  contract_start   DateTime
  contract_end     DateTime
  picture          String?
  area             Account            @relation(name: "AreaRelation", fields: [areaId], references: [id])
  areaId           Int
  location         Account            @relation(name: "LocationRelation", fields: [locationId], references: [id])
  locationId       Int
  VehicleInventory VehicleInventory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  FuelType         FuelType?          @relation(fields: [fuelTypeId], references: [id])
  fuelTypeId       Int?
}

model VehicleVariant {
  id        Int       @id @default(autoincrement())
  category  String
  Vehicle   Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FuelType {
  id        Int       @id @default(autoincrement())
  category  String
  Vehicle   Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model VehicleInventory {
  id        Int      @id @default(autoincrement())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id          Int           @id @default(autoincrement())
  code        String
  type        String
  reason      String        @db.LongText
  requester   Account       @relation(name: "RequesterRelation", fields: [requesterId], references: [id])
  requesterId Int
  requested   Account       @relation(name: "RequestedRelation", fields: [requestedId], references: [id])
  requestedId Int
  items       RequestItem[]
  note        String?       @db.LongText
  status      String        @default("pending")
  signedPdf   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RequestItem {
  id         Int       @id @default(autoincrement())
  material   Material? @relation(fields: [materialId], references: [id])
  materialId Int?
  tool       Tool?     @relation(fields: [toolId], references: [id])
  toolId     Int?
  quantity   Int
  request    Request?  @relation(fields: [requestId], references: [id])
  requestId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
